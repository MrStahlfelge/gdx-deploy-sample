import org.mini2Dx.butler.ButlerUtils;

apply plugin: "java"

sourceCompatibility = 1.7

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.darkgravity.questionablemarkup.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

def utilsDir() {
    "D:/Code/GDX Utils"
}

def desktopWorkingDir() {
    "D:/Code/Java Code/questionable-markup/desktop"
}

def desktopReleaseDir() {
    "build/releases"
}

def releaseDir(platform) {
    desktopReleaseDir() + "/" + platform
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

task obfuscate(type: proguard.gradle.ProGuardTask) {
    dependsOn 'dist'
    configuration files("proguard-project.txt")
    libraryjars files("C:/Program Files/Java/jre7/lib/rt.jar", "C:/Program Files/Java/jre7/lib/jce.jar")
    injars files("build/libs/desktop-1.0.jar")
    outjars files("build/libs/questionable-markup.jar")
}

def packArgs(platform, jre) {
   [
        utilsDir() + "/packr.jar",
        "--platform", platform,
        "--jdk", utilsDir() + "/jre/" + jre + ".zip",
        "--executable", "QuestionableMarkup",
        "--classpath", "build/libs/questionable-markup.jar",
        "--mainclass", "com.darkgravity.questionablemarkup.desktop.DesktopLauncher",
        "--vmargs", "Xmx1G",
        "--minimizejre", "config/packr-minimize.json",
        "--icon", "assets/icons/app-icon.icns",
        "--output", releaseDir(platform) + (platform == "mac" ? "/QuestionableMarkup.app" : "")
    ]
}

task packWindows32(type: JavaExec) {
    main = "-jar"
    args = packArgs("windows32", "openjdk-1.7.0-u80-unofficial-windows-i586-image")
}

task packWindows64(type: JavaExec) {
    main = "-jar"
    args = packArgs("windows64", "openjdk-1.7.0-u80-unofficial-windows-amd64-image")
}

task packMac(type: JavaExec) {
    main = "-jar"
    args = packArgs("mac", "openjdk-1.7.0-u45-unofficial-macosx-x86_64-image")
}

task packLinux32(type: JavaExec) {
    main = "-jar"
    args = packArgs("linux32", "openjdk-1.7.0-u80-unofficial-linux-i586-image")
}

task packLinux64(type: JavaExec) {
    main = "-jar"
    args = packArgs("linux64", "openjdk-1.7.0-u80-unofficial-linux-amd64-image")
}

task pack {
    dependsOn 'obfuscate'
    dependsOn 'packWindows32'
    dependsOn 'packWindows64'
    dependsOn 'packMac'
    dependsOn 'packLinux32'
    dependsOn 'packLinux64'
    tasks.findByName('packWindows32').mustRunAfter 'obfuscate'
    tasks.findByName('packWindows64').mustRunAfter 'packWindows32'
    tasks.findByName('packMac').mustRunAfter 'packWindows64'
    tasks.findByName('packLinux32').mustRunAfter 'packMac'
    tasks.findByName('packLinux64').mustRunAfter 'packLinux32'
}

def setIconArgs(platform) {
    [
        "-addoverwrite",
        releaseDir(platform) + "/QuestionableMarkup.exe, " + releaseDir(platform) + "/QuestionableMarkup.exe, assets/icons/app-icon.ico, ICONGROUP, ICON_MAINFRAME,"
    ]
}

task setIconWindows32(type: Exec) {
    workingDir = desktopWorkingDir()
    executable = utilsDir() + "/ResourceHacker.exe"
    args = setIconArgs("windows32")
}

task setIconWindows64(type: Exec) {
    workingDir = desktopWorkingDir()
    executable = utilsDir() + "/ResourceHacker.exe"
    args = setIconArgs("windows64")
}

task setIcon {
    dependsOn 'pack'
    dependsOn 'setIconWindows32'
    dependsOn 'setIconWindows64'
    tasks.findByName('setIconWindows32').mustRunAfter 'pack'
    tasks.findByName('setIconWindows64').mustRunAfter 'setIconWindows32'
}

task release {
    dependsOn 'dist'
    dependsOn 'obfuscate'
    dependsOn 'pack'
    dependsOn 'setIcon'
    tasks.findByName('obfuscate').mustRunAfter 'dist'
    tasks.findByName('pack').mustRunAfter 'obfuscate'
    tasks.findByName('setIcon').mustRunAfter 'pack'
}

def getPushCommandLine(platform, channel) {
    def osBinDir = desktopWorkingDir() + "/" + releaseDir(platform);
    if(osBinDir == null) {
        throw new Exception("No steward binary directory set for " + channel)
    }

    if(project.getExtensions().findByName('butler').alphaChannel) {
        channel += "-alpha"
    } else if(project.getExtensions().findByName('butler').betaChannel) {
        channel += "-beta"
    }

    String user = project.getExtensions().findByName('butler').user
    if(user == null) {
        throw new Exception("user not set in steward configuration")
    }
    String game = project.getExtensions().findByName('butler').game
    if(game == null) {
        throw new Exception("game not set in steward configuration")
    }
    String deployDetails = user + "/" + game + ":" + channel;

    def args = [ButlerUtils.getButlerBinary(project).getAbsolutePath(), 'push']
    if(project.getExtensions().findByName('butler').userVersion != null) {
        args += [releaseDir(platform), deployDetails, "--userversion", project.getExtensions().findByName('butler').userVersion]
    } else {
        args += [releaseDir(platform), deployDetails]
    }
    return args
}

task pushWindows32(type: Exec) {
    dependsOn('butlerUpdate')
    commandLine getPushCommandLine("windows32", "windows32")
}

task pushWindows64(type: Exec) {
    dependsOn('butlerUpdate')
    commandLine getPushCommandLine("windows64", "windows64")
}

task pushMac(type: Exec) {
    dependsOn('butlerUpdate')
    commandLine getPushCommandLine("mac", "osx")
}

task pushLinux32(type: Exec) {
    dependsOn('butlerUpdate')
    commandLine getPushCommandLine("linux32", "linux32")
}

task pushLinux64(type: Exec) {
    dependsOn('butlerUpdate')
    commandLine getPushCommandLine("linux64", "linux64")
}

task push {
    dependsOn 'release'
    dependsOn 'pushWindows32'
    dependsOn 'pushWindows64'
    dependsOn 'pushMac'
    dependsOn 'pushLinux32'
    dependsOn 'pushLinux64'
    tasks.findByName('pushWindows32').mustRunAfter 'release'
    tasks.findByName('pushWindows64').mustRunAfter 'pushWindows32'
    tasks.findByName('pushMac').mustRunAfter 'pushWindows64'
    tasks.findByName('pushLinux32').mustRunAfter 'pushMac'
    tasks.findByName('pushLinux64').mustRunAfter 'pushLinux32'
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}